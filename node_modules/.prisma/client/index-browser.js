
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  detectRuntime,
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.8.0
 * Query Engine version: 0a83d8541752d7582de2ebc1ece46519ce72a848
 */
Prisma.prismaVersion = {
  client: "5.8.0",
  engine: "0a83d8541752d7582de2ebc1ece46519ce72a848"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  throw new Error(`Extensions.getExtensionContext is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.defineExtension = () => {
  throw new Error(`Extensions.defineExtension is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  hash: 'hash',
  uuid: 'uuid',
  first_name: 'first_name',
  last_name: 'last_name',
  profileImg: 'profileImg',
  age: 'age',
  gender: 'gender',
  role: 'role',
  created_at: 'created_at',
  updated_at: 'updated_at',
  is_active: 'is_active'
};

exports.Prisma.CartScalarFieldEnum = {
  id: 'id',
  userId: 'userId'
};

exports.Prisma.FeedbackScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  authorName: 'authorName',
  messageFeedback: 'messageFeedback',
  dateCreated: 'dateCreated',
  isModerated: 'isModerated',
  imageFeedback: 'imageFeedback',
  rating: 'rating'
};

exports.Prisma.SneakerDataScalarFieldEnum = {
  id: 'id',
  title: 'title',
  sneakerId: 'sneakerId',
  imageUrl: 'imageUrl',
  price: 'price',
  sex: 'sex',
  color: 'color',
  brand: 'brand',
  description: 'description',
  materials: 'materials',
  countryMade: 'countryMade',
  typeOfSneakers: 'typeOfSneakers',
  isAvailabile: 'isAvailabile'
};

exports.Prisma.AddressScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  firstName: 'firstName',
  lastName: 'lastName',
  surname: 'surname',
  phoneNumber: 'phoneNumber',
  city: 'city',
  postalCode: 'postalCode',
  street: 'street',
  buildingNumber: 'buildingNumber',
  houseNumber: 'houseNumber',
  apartment: 'apartment'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  orderNumber: 'orderNumber',
  userId: 'userId',
  createdAt: 'createdAt',
  status: 'status',
  sneakerDataId: 'sneakerDataId',
  amount: 'amount',
  payStatus: 'payStatus',
  addressId: 'addressId',
  orderMessage: 'orderMessage'
};

exports.Prisma.PostIdeasScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  ideaText: 'ideaText'
};

exports.Prisma.ProfileScalarFieldEnum = {
  id: 'id',
  nickName: 'nickName',
  userId: 'userId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Gender = exports.$Enums.Gender = {
  male: 'male',
  female: 'female',
  notSelected: 'notSelected'
};

exports.Role = exports.$Enums.Role = {
  USER: 'USER',
  ADMIN: 'ADMIN'
};

exports.SexShoe = exports.$Enums.SexShoe = {
  male: 'male',
  female: 'female',
  unisex: 'unisex',
  all: 'all'
};

exports.Type = exports.$Enums.Type = {
  sneakers: 'sneakers',
  boots: 'boots',
  basketball: 'basketball',
  all: 'all'
};

exports.OrderStatus = exports.$Enums.OrderStatus = {
  PREPAIRING: 'PREPAIRING',
  PENDING: 'PENDING',
  SENDED: 'SENDED',
  COMPLETED: 'COMPLETED',
  RECEIVED: 'RECEIVED',
  CANCELED: 'CANCELED'
};

exports.PayStatus = exports.$Enums.PayStatus = {
  success: 'success',
  whenReceived: 'whenReceived',
  failed: 'failed'
};

exports.Prisma.ModelName = {
  User: 'User',
  cart: 'cart',
  feedback: 'feedback',
  SneakerData: 'SneakerData',
  address: 'address',
  order: 'order',
  postIdeas: 'postIdeas',
  Profile: 'Profile'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        const runtime = detectRuntime()
        const edgeRuntimeName = {
          'workerd': 'Cloudflare Workers',
          'deno': 'Deno and Deno Deploy',
          'netlify': 'Netlify Edge Functions',
          'edge-light': 'Vercel Edge Functions',
        }[runtime]

        let message = 'PrismaClient is unable to run in '
        if (edgeRuntimeName !== undefined) {
          message += edgeRuntimeName + '. As an alternative, try Accelerate: https://pris.ly/d/accelerate.'
        } else {
          message += 'this browser environment, or has been bundled for the browser (running in `' + runtime + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://github.com/prisma/prisma/issues`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
